// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  analyses      Analysis[]
}

// Analysis model
model Analysis {
  id               String   @id @default(cuid())
  url              String
  title            String?
  screenshotUrl    String?
  heatmapUrl       String?
  seoScore         Int?
  loadTime         Int?
  pageSize         Int?
  technologies     String[]
  insights         Json?
  isPublic         Boolean  @default(false)
  contentAnalysis  Json
  seoAnalysis      Json
  technicalAnalysis Json
  heatmapData      Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId           String?
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([url])
  @@index([createdAt])
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
